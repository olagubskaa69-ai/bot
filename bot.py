import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
API_TOKEN = os.getenv("API_TOKEN", "8383126261:AAHV-m1cRtEs8uU0-zMUGo4oRoXsv_o3b0A")
ADMIN_ID = int(os.getenv("ADMIN_ID", 7666912965))  # —Å–≤—ñ–π Telegram ID

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as f:
                return set(json.load(f))
        except:
            return set()
    return set()

def save_users():
    with open(USERS_FILE, "w") as f:
        json.dump(list(all_users), f)

# —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
user_data = {}
completed_users = set()
all_users = load_users()  # ‚úÖ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    uid = message.from_user.id
    all_users.add(uid)
    save_users()  # ‚úÖ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª

    await message.answer(
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç <b>—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ—Ç –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è <b>–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏</b> üö®\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É.\n\n"
        "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:",
        reply_markup=ReplyKeyboardRemove()
    )
    user_data[uid] = {}
    if uid in completed_users:
        completed_users.remove(uid)


# --- –†–æ–∑—Å–∏–ª–∫–∞ ---
@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    user_data[message.from_user.id] = {"mode": "broadcast"}


# --- –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ ---
@dp.message()
async def form_handler(message: types.Message):
    uid = message.from_user.id

    # --- –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ ---
    if uid == ADMIN_ID and uid in user_data and user_data[uid].get("mode") == "broadcast":
        success, fail = 0, 0
        for user_id in list(all_users):
            try:
                await bot.copy_message(chat_id=user_id, from_chat_id=uid, message_id=message.message_id)
                success += 1
                await asyncio.sleep(0.05)  # ‚úÖ –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            except Exception as e:
                fail += 1
                # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É
                if "blocked by the user" in str(e):
                    all_users.remove(user_id)
                    save_users()

        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n–û—à–∏–±–∫–∏: {fail}")
        user_data.pop(uid, None)
        return

    # --- –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ---
    if message.text == "üìã –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É":
        await message.answer("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:", reply_markup=ReplyKeyboardRemove())
        user_data[uid] = {}
        if uid in completed_users:
            completed_users.remove(uid)
        return

    if uid not in user_data:
        return

    # --- –Ø–∫—â–æ –Ω–∞–¥—ñ–π—à–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç ---
    if message.contact and "phone" not in user_data[uid]:
        user_data[uid]["phone"] = message.contact.phone_number
        await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É <b>–ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å</b>:", reply_markup=ReplyKeyboardRemove())
        return

    # --- –ê–Ω–∫–µ—Ç–∞ –ø–æ –∫—Ä–æ–∫–∞—Ö ---
    if "fio" not in user_data[uid]:
        user_data[uid]["fio"] = message.text
        await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É <b>–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b> (–î–î.–ú–ú.–ì–ì–ì–ì):")

    elif "dob" not in user_data[uid]:
        user_data[uid]["dob"] = message.text

        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º <b>–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:", reply_markup=contact_keyboard)

    elif "phone" not in user_data[uid]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    elif "question" not in user_data[uid]:
        user_data[uid]["question"] = message.text

        text = (
            "üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
            f"üë§ –§–ò–û: {user_data[uid]['fio']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data[uid]['dob']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[uid]['phone']}\n"
            f"üìù –í–æ–ø—Ä–æ—Å/–ü—Ä–æ–±–ª–µ–º–∞: {user_data[uid]['question']}"
        )

        await bot.send_message(ADMIN_ID, text)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìã –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚è≥\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ <b>–ß–∞—Ç-–ë–æ—Ç –ú–∏–Ω–∑–¥—Ä–∞–≤–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å</b> üíº",
            reply_markup=keyboard
        )

        user_data.pop(uid)
        completed_users.add(uid)


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

